// Generated by CoffeeScript 1.6.3
describe('Group', function() {
  var attributes, group;
  group = null;
  attributes = {
    id: '#1234',
    name: "Seguridad Vial",
    categories: new Array
  };
  beforeEach(function() {
    return group = new Group(attributes);
  });
  it('responds to groupId', function() {
    return expect(group.groupId).toBeDefined();
  });
  it('responds to name', function() {
    return expect(group.name).toBeDefined();
  });
  return it('responds to categories', function() {
    return expect(group.categories).toBeDefined();
  });
});

describe('_mapCategories', function() {
  var attributes, group;
  group = null;
  attributes = {
    id: '#1234',
    name: "Seguridad Vial",
    categories: [
      new Category({
        group: []
      }), new Category({
        group: new Array
      })
    ]
  };
  beforeEach(function() {
    group = new Group(attributes);
    spyOn(group, '_mapCategories').and.callFake(function() {
      return group.categories = [
        new Category({
          group: []
        }), new Category({
          group: new Array
        })
      ];
    });
    return group._mapCategories(attributes.categories);
  });
  it('tracks the spy call', function() {
    return expect(group._mapCategories).toHaveBeenCalledWith(attributes.categories);
  });
  return it('returns and array of two categories', function() {
    return expect(group.categories.length).toEqual(2);
  });
});

describe('Group.all', function() {
  var groupMock, groupResponseJSON, groupsArray;
  groupsArray = new Array;
  groupMock = null;
  groupResponseJSON = {
    id: '#1234',
    name: 'Vialidad y Transito (SS)',
    categories: [["ACCIDENTE", 123]]
  };
  beforeEach(function() {
    var index, _i;
    for (index = _i = 1; _i <= 3; index = ++_i) {
      groupsArray.push(new Group(groupResponseJSON));
    }
    groupMock = jasmine.createSpyObj(Group, ['find']);
    groupMock.find();
    return groupMock.find.and.callFake(function() {
      return groupsArray;
    });
  });
  it('tracks that the spy was called', function() {
    return expect(groupMock.find).toHaveBeenCalled();
  });
  return it('returns and array of three reports', function() {
    return expect(groupMock.find()).toEqual(groupsArray);
  });
});
