// Generated by CoffeeScript 1.6.3
describe('Report', function() {
  var report;
  report = null;
  beforeEach(function() {
    return report = new Report;
  });
  it('responds to reports endpoint', function() {
    return expect(report.url).toBeDefined();
  });
  it('responds to account', function() {
    expect(report.account).toBeDefined();
    return expect(report.account).toBe('nl');
  });
  it('responds to format json as default', function() {
    expect(report.format).toBeDefined();
    return expect(report.format).toBe('json');
  });
  it('responds to title', function() {
    return expect(report.title).toBeDefined();
  });
  it('responds to content', function() {
    return expect(report.content).toBeDefined();
  });
  it('responds to first_name', function() {
    return expect(report.first_name).toBeDefined();
  });
  it('responds to last_name', function() {
    return expect(report.last_name).toBeDefined();
  });
  it('responds to return_path', function() {
    return expect(report.return_path).toBeDefined();
  });
  it('responds to lat', function() {
    return expect(report.lat).toBeDefined();
  });
  it('responds to lng', function() {
    return expect(report.lng).toBeDefined();
  });
  it('responds to video_url', function() {
    return expect(report.video_url).toBeDefined();
  });
  it('responds to categories', function() {
    expect(report.categories).toBeDefined();
    return expect(report.categories).toBe('ACCIDENTE');
  });
  return it('has a didSave default value to false', function() {
    return expect(report.didSave).toBeFalsy();
  });
});

describe('._serializedAttributes', function() {
  var expectedReportsHash, report;
  expectedReportsHash = {};
  report = new Report({
    title: 'A title',
    content: 'The content',
    first_name: 'Abraham',
    last_name: 'Kuri',
    categories: 'ACCIDENTE'
  });
  beforeEach(function() {
    return expectedReportsHash = {
      reports: {
        account: 'nl',
        format: 'json',
        title: 'A title',
        content: 'The content',
        first_name: 'Abraham',
        last_name: 'Kuri',
        return_path: '',
        lat: '',
        lng: '',
        video_url: '',
        categories: 'ACCIDENTE'
      }
    };
  });
  return it('has the expected POST serialization json', function() {
    return expect(report._serializedAttributes()).toEqual(expectedReportsHash);
  });
});

describe('Report.find()', function() {
  var reportMock, reportsArray, responseReportJSON;
  reportsArray = new Array;
  reportMock = null;
  responseReportJSON = {
    account: 'nl',
    format: 'json',
    title: 'A title',
    content: 'The content',
    first_name: 'Abraham',
    last_name: 'Kuri',
    return_path: '',
    lat: '',
    lng: '',
    video_url: '',
    categories: 'ACCIDENTE',
    created_at: new Date(),
    updated_at: new Date(),
    ticket: '#1234',
    state: 'read',
    is_public: true,
    votes: 0,
    stars: 0,
    address_detail: {},
    group: 'Vialidad y Transito (SS)'
  };
  beforeEach(function() {
    var index, _i;
    for (index = _i = 1; _i <= 3; index = ++_i) {
      reportsArray.push(new Report(responseReportJSON));
    }
    reportMock = jasmine.createSpyObj('Report', ['find']);
    reportMock.find();
    return reportMock.find.and.callFake(function() {
      return reportsArray;
    });
  });
  it('tracks that the spy was called', function() {
    return expect(reportMock.find).toHaveBeenCalled();
  });
  return it('returns and array of three reports', function() {
    return expect(reportMock.find()).toEqual(reportsArray);
  });
});

describe('Report.find("limit": 1)', function() {
  var reportMock, reportsArray, responseReportJSON;
  reportsArray = new Array;
  reportMock = null;
  responseReportJSON = {
    account: 'nl',
    format: 'json',
    title: 'A title',
    content: 'The content',
    first_name: 'Abraham',
    last_name: 'Kuri',
    return_path: '',
    lat: '',
    lng: '',
    video_url: '',
    categories: 'ACCIDENTE',
    created_at: new Date(),
    updated_at: new Date(),
    ticket: '#1234',
    state: 'read',
    is_public: true,
    votes: 0,
    stars: 0,
    address_detail: {},
    group: 'Vialidad y Transito (SS)'
  };
  beforeEach(function() {
    var index, _i;
    for (index = _i = 1; _i <= 3; index = ++_i) {
      reportsArray.push(new Report(responseReportJSON));
    }
    reportMock = jasmine.createSpyObj('Report', ['find']);
    reportMock.find({
      "limit": 1
    });
    return reportMock.find.and.callFake(function() {
      return reportsArray[0];
    });
  });
  it('tracks that the spy was called', function() {
    return expect(reportMock.find).toHaveBeenCalledWith({
      "limit": 1
    });
  });
  return it('returns and array of three reports', function() {
    return expect(reportMock.find()).toEqual(reportsArray[0]);
  });
});

describe('report_instance._setGetters', function() {
  var report;
  report = null;
  beforeEach(function() {
    var responseReportJSON;
    responseReportJSON = {
      account: 'nl',
      format: 'json',
      title: 'A title',
      content: 'The content',
      first_name: 'Abraham',
      last_name: 'Kuri',
      return_path: '',
      lat: '',
      lng: '',
      video_url: '',
      categories: 'ACCIDENTE',
      created_at: new Date(),
      updated_at: new Date(),
      ticket: '#1234',
      state: 'read',
      is_public: true,
      votes: 0,
      stars: 0,
      address_detail: {},
      group: 'Vialidad y Transito (SS)'
    };
    return report = new Report(responseReportJSON);
  });
  it('responds to ticketId', function() {
    return expect(report.ticketId).toBeDefined();
  });
  it('responds to state', function() {
    return expect(report.state).toBeDefined();
  });
  it('responds to created_at', function() {
    return expect(report.created_at).toBeDefined();
  });
  it('responds to is_public', function() {
    return expect(report.is_public).toBeDefined();
  });
  it('responds to votes', function() {
    return expect(report.votes).toBeDefined();
  });
  it('responds to stars', function() {
    return expect(report.stars).toBeDefined();
  });
  it('responds to address_detail', function() {
    return expect(report.address_detail).toBeDefined();
  });
  return it('responds to group', function() {
    return expect(report.group).toBeDefined();
  });
});

describe('report_instance.save', function() {
  var report;
  report = null;
  beforeEach(function() {
    var reportAttributes, responseReportJSON;
    reportAttributes = {
      content: 'A content',
      categories: 'ACCIDENTE'
    };
    report = new Report(reportAttributes);
    responseReportJSON = {
      account: 'nl',
      format: 'json',
      title: 'A title',
      first_name: 'Abraham',
      last_name: 'Kuri',
      return_path: '',
      lat: '',
      lng: '',
      video_url: '',
      created_at: new Date(),
      updated_at: new Date(),
      ticket: '#1234',
      state: 'read',
      is_public: true,
      votes: 0,
      stars: 0,
      address_detail: {},
      group: 'Vialidad y Transito (SS)'
    };
    spyOn(report, 'save').and.callFake(function() {
      return report._setGetters(responseReportJSON);
    });
    return report.save();
  });
  it('tracks the spy was called', function() {
    return expect(report.save).toHaveBeenCalled();
  });
  return it('sets the ticketId', function() {
    return expect(report.ticketId).toBeDefined();
  });
});

describe('report_instance.create()', function() {
  var report;
  report = null;
  beforeEach(function() {
    var reportAttributes, responseReportJSON;
    reportAttributes = {
      content: 'A content',
      categories: 'ACCIDENTE'
    };
    report = new Report(reportAttributes);
    responseReportJSON = {
      account: 'nl',
      format: 'json',
      title: 'A title',
      first_name: 'Abraham',
      last_name: 'Kuri',
      return_path: '',
      lat: '',
      lng: '',
      video_url: '',
      created_at: new Date(),
      updated_at: new Date(),
      ticket: '#1234',
      state: 'read',
      is_public: true,
      votes: 0,
      stars: 0,
      address_detail: {},
      group: 'Vialidad y Transito (SS)'
    };
    spyOn(report, 'save').and.callFake(function() {
      return report._setGetters(responseReportJSON);
    });
    spyOn(Report, 'create').and.callFake(function() {
      return report.save();
    });
    return Report.create(reportAttributes);
  });
  it('tracks the spy was called', function() {
    return expect(Report.create).toHaveBeenCalled();
  });
  return it('saves the report', function() {
    return expect(report.ticketId).toBeDefined();
  });
});
